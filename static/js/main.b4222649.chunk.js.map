{"version":3,"sources":["Search.js","Home.js","PackageDetail.js","App.js","serviceWorker.js","index.js"],"names":["Search","_useState","useState","_useState2","Object","slicedToArray","packageName","setPackageName","targetKey","_useState3","_useState4","keyPressed","setKeyPressed","downHandler","_ref","key","console","log","useEffect","window","addEventListener","removeEventListener","useKeyPress","react_default","a","createElement","react_router","to","value","className","id","type","placeholder","onChange","e","target","Home","src_Search","href","PackageDetail","match","version","setVersion","fetch","concat","params","then","res","json","document","title","JSON","stringify","App","react_router_dom","path","exact","component","Boolean","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4222649.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router'\n\n\nfunction Search() {\n  const [packageName, setPackageName] = useState('');\n  const enter = useKeyPress('Enter');\n  if (enter){\n    return (<Redirect to={packageName}/>)\n  }\n  return (\n        <input\n          value={packageName}\n          className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\"\n          id=\"packageName\"\n          type=\"text\"\n          placeholder=\"Search packages\"\n          onChange={e => setPackageName(e.target.value)} />\n  );\n}\n\nfunction useKeyPress(targetKey) {\n    // State for keeping track of whether key is pressed\n    const [keyPressed, setKeyPressed] = useState(false);\n    console.log(keyPressed, targetKey)\n    // If pressed key is our target key then set to true\n    function downHandler({ key }) {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    }\n  \n  \n    // Add event listeners\n    useEffect(() => {\n      window.addEventListener('keydown', downHandler);\n      // Remove event listeners on cleanup\n      return () => {\n        window.removeEventListener('keydown', downHandler);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n  \n    return keyPressed;\n  }\n\nexport default Search;\n","import React from 'react';\nimport Search from './Search'\n\n\nfunction Home() {\n  return (\n    <div>\n      <Search />\n    <div className=\"p-3 mt-4 border-l-4\">\n        <p className=\"font-bold text-xl mb-2\"><a href=\"https://www.npmjs.com/package/npm\">npm</a></p>\n        <p className=\"text-gray-700 text-base\">Version: <span id=\"latest\">6.9.0</span></p>\n        <p className=\"mt-3\"><code className=\"bg-gray-200 px-3 py-1\">npm install -g npm</code></p>\n    </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport Search from './Search'\n\nfunction PackageDetail({match}) {\n\n    const [version, setVersion] = useState(0);\n\n    useEffect(() => {\n        fetch(`https://y8bpiklk4e.execute-api.us-east-1.amazonaws.com/dev/packages/${match.params.packageName}`)\n            .then(function (res) {\n                return res.json()\n            })    \n            .then(function(res) {\n                document.title = `${match.params.packageName} package latest version on npm`;\n                setVersion(JSON.stringify(res))\n            })\n    });\n  \n    return (\n        <div>\n      <Search />\n      <div className=\"p-3 mt-4 border-l-4\">\n          <p className=\"font-bold text-xl mb-2\"><a href=\"https://www.npmjs.com/package/{match.params.packageName}\">{match.params.packageName}</a></p>\n          <p className=\"text-gray-700 text-base\">Version: <span id=\"latest\">{version}</span></p>\n          <p className=\"mt-3\"><code className=\"bg-gray-200 px-3 py-1\">npm install {match.params.packageName}@latest</code></p>\n      </div>\n      </div>\n \n    );\n}\n\nexport default PackageDetail;","import React from 'react';\nimport \"./index.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Home from './Home';\nimport PackageDetail from './PackageDetail';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container m-10 mx-auto max-w-2xl\">\n        <Link to=\"/\"><h1 className=\"text-6xl\">npm latest version</h1></Link>\n        <Route path=\"/\"  exact component={Home} />\n        <Route path=\"/:packageName\" component={PackageDetail} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}